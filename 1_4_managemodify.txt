git管理的是修改，而非文件

完全掌握了暂存区的概念后。下面，我们要讨论的就是，
为什么Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件。

Git管理的是修改，当用git add命令后，
在工作区的第一次修改被放入暂存区，git commit只提交放在暂存区的内容。

如果在工作区发生第二次修改，但是这次修改如果没有放入暂存区(即没有git add的话)，则git commit不会提交本次修改。
所以，git commit只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。

用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别。


撤销（删除）修改

文件已修改，未add到暂存区:
git checkout -- file可还原

文件已修改，add到暂存区未commit：
git reset HEAD file
git checkout -- file可还原


版本回退
git reset --hard HEAD^
git reset --hard the_id_number


当你要删除文件的时候，可以采用命令：rm test.txt

这个时候（也就是说这个时候只执行了rm test.txt）有两种情况
第一种情况:的确要把test.txt删掉，那么可以执行
    git rm test.txt
    git commit -m "remove test.txt"
    然后文件就被删掉了

第二种情况:删错文件了，不应该删test.txt，注意这时只执行了rm test.txt，还没有git commit提交，
所以可以执行git checkout test.txt 将文件恢复。
并不是说执行完git commit -m "remove test.txt"后还能用checkout恢复，commit之后版本库里的文件也没了，自然没办法用checkout恢复，而是要用其他的办法



